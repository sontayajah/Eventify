// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id       String @id @default(cuid())
    email    String
    username String @unique
    password String @db.Text

    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    profile Profile?
    posts   Post[]

    @@map("users")
}

model Profile {
    id           String  @id @default(cuid())
    userId       String  @unique @map("user_id")
    displayName  String  @map("display_name")
    isVerified   Boolean @default(false) @map("is_verified")
    verifyTypeId String  @default("0") @map("verify_type_id")
    imageUrl     String? @map("image_url") @db.VarChar(255)

    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    user       User       @relation(fields: [userId], references: [id])
    verifyType VerifyType @relation(fields: [verifyTypeId], references: [verifyId])

    @@map("profiles")
}

model VerifyType {
    id       String @id @default(cuid())
    verifyId String @unique
    type     String

    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    profiles Profile[]

    @@map("verify_types")
}

model Post {
    id            String    @id @default(cuid())
    title         String    @db.VarChar(255)
    content       String    @db.Text
    authorId      String    @map("author_id")
    imageUrl      String    @map("image_url")
    imageAlt      String    @map("image_alt")
    likes         Int       @default(0)
    shares        Int       @default(0)
    slug          String    @unique
    isPublished   Boolean   @default(false) @map("is_published")
    isDeleted     Boolean   @default(false) @map("is_deleted")
    url           String    @unique @db.VarChar(255)
    publishedDate DateTime? @map("published_date")

    deletedAt DateTime? @map("deleted_at")
    createdAt DateTime? @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    author     User       @relation(fields: [authorId], references: [id])
    tags       Tag[]
    categories Category[]

    @@index([createdAt])
    @@index([authorId])
    @@index([slug])
    @@map("posts")
}

model Tag {
    id       String @id @default(cuid())
    tagId    String @unique @map("tag_id")
    tagName  String @map("tag_name")
    tagColor String @map("tag_color")
    tagUrl   String @default("/") @map("tag_url")

    posts Post[]

    @@map("tags")
}

model Category {
    id            String @id @default(cuid())
    categoryId    String @map("category_id")
    categoryName  String @map("category_name")
    categoryColor String @map("category_color")
    categoryUrl   String @default("/") @map("category_url")

    posts Post[]

    @@map("category")
}
